#!/usr/bin/env node --max_old_space_size=4096

'use strict';

var byline = require('byline');
var fs = require('graceful-fs');
var path = require('path');
var indexWay = require('../lib/index-way');
var splitWays = require('../lib/split-ways');
var mergeWays = require('../lib/merge-ways');
var selectTileWays = require('../lib/select-tile-ways');
var argv = require('minimist')(process.argv.slice(2));

var quadHash = {};

var outputPath = argv.outputPath;
var waysFile = argv.waysFile;
var zoomLevel = argv.zoomLevel;

var waysStream = byline(fs.createReadStream(waysFile), {encoding: 'utf8'});

waysStream.on('data', function (line) {
  // hash ways into the quadHash

  var way = JSON.parse(line);

  // parse refs if they are in string format
  if (typeof way.properties.refs === 'string') {
    way.properties.refs = way.properties.refs.split(',');
  }

  // throw out ways that have a different number of refs vs coordinates
  if (way.properties.refs !== undefined && way.geometry.coordinates.length === way.properties.refs.length) {
    // index the way's segments into z14 tiles
    var tileQuadkeys = indexWay(way, zoomLevel);

    Object.keys(tileQuadkeys).forEach(function (quadkey) {
      if (quadHash[quadkey] === undefined) quadHash[quadkey] = [];
      quadHash[quadkey] = quadHash[quadkey].concat(tileQuadkeys[quadkey]);
    });
  }

}).on('end', function () {
  // once all ways are processed, normalize each
  // quadkey's ways and write them to disk.

  Object.keys(quadHash).forEach(function (quadkey) {
    var ways = quadHash[quadkey];

    ways = splitWays(ways);
    ways = mergeWays(ways);
    ways = selectTileWays(quadkey, ways, zoomLevel);

    fs.writeFile(path.join(outputPath, quadkey + '.json'), ways.map(function (way) {
      // append quadkey to way id
      way.properties.id = way.properties.id + ';' + quadkey;
      return JSON.stringify(way);
    }).join('\n'));
  });
});
